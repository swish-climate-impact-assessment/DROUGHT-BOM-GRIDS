#+TITLE:Drought Bom Grids Overview 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----

* TODOLIST
** TODO need to add metadata
** TODO do an annual average rainfall and compare with the poa_weather data
** TODO start a new project to join drought with nceph study BOUNDARIES_ELECTORATES
* LOAD
Before restoring an SQL dump, all the users who own objects or were granted permissions on objects in the dumped database must already exist. If they do not, the restore will fail to recreate the objects with the original ownership and/or permissions. (Sometimes this is what you want, but usually it is not.)
#+name:prepare ewedb
#+begin_src R :session *shell* :tangle src/prepare ewedb.r :exports none :eval no
###########################################################################
# newnode: prepare ewedb
psql -h 115.146.94.209 -d ewedb -U postgres
CREATE ROLE public_group;
CREATE SCHEMA bom_grids;
grant usage on schema bom_grids to public_group;
CREATE ROLE ivan_hanigan LOGIN PASSWORD 'XXXX';
GRANT ALL ON SCHEMA bom_grids to ivan_hanigan;
\q
# add to pg_hba
reload
select pg_reload_conf();
#+end_src

#+name:dump and restore
#+begin_src sh :session *shell* :tangle src/dump and restore.r :exports none :eval no
###########################################################################
# newnode: dump and restore
/usr/bin/pg_dump --host 130.56.102.41 --port 5432 --username "ivan_hanigan" --role "ivan_hanigan" --no-password  --format plain --encoding UTF8 --verbose --file "/home/ivan_hanigan/projects/DROUGHT-BOM-GRIDS/data/bom_grids.rain_nsw_1890_2008_4.backup" --table "bom_grids.rain_nsw_1890_2008_4" "delphe"


#pg_dump -h 130.56.102.41 -p 5432 -U ivan_hanigan -F t -v -i -f "/home/ivan_hanigan/projects/DROUGHT-BOM-GRIDS/data/bom_grids.rain_nsw_1890_2008_4.backup" -t \"bom_grids\".\"rain_nsw_1890_2008_4\" delphe
cd /home/ivan_hanigan/projects/DROUGHT-BOM-GRIDS/data/
psql -h 115.146.94.209 -d ewedb -U postgres < "bom_grids.rain_nsw_1890_2008_4.backup"

pg_dump -h 130.56.102.41 -p 5432 -U ivan_hanigan -i -t \"bom_grids\".\"grid_aus\" delphe | psql -h 115.146.94.209 -U postgres ewedb
pg_dump -h 130.56.102.41 -p 5432 -U ivan_hanigan -i -t \"bom_grids\".\"grid_nsw\" delphe | psql -h 115.146.94.209 -U postgres ewedb

in pgadmin
CREATE TABLE bom_grids.rain_aus_1890_2008_4
(
  gid integer NOT NULL,
  timeid integer NOT NULL,
  year integer,
  month integer,
  rain double precision,
  rain6mo double precision,
  pctile double precision,
  rescaledpctile double precision,
  indexbelowthreshold double precision,
  sum double precision,
  count integer,
  CONSTRAINT r_aus_pk PRIMARY KEY (gid , timeid )
)
WITH (
  OIDS=FALSE
);
ALTER TABLE bom_grids.rain_aus_1890_2008_4
  OWNER TO postgres;
GRANT ALL ON TABLE bom_grids.rain_aus_1890_2008_4 TO postgres;
GRANT ALL ON TABLE bom_grids.rain_aus_1890_2008_4 TO public_group;



pg_dump -h 130.56.102.41 -p 5432 -U ivan_hanigan -i -t \"bom_grids\".\"rain_nsw_1890_2008_4\" delphe | psql -h 115.146.94.209 -U postgres ewedb

# test electorates
psql -h 115.146.94.209 -d ewedb -U postgres
CREATE ROLE student_group;
CREATE SCHEMA boundaries_electorates;
grant usage on schema boundaries_electorates to public_group;

pg_dump -h 130.56.102.41 -p 5432 -U ivan_hanigan -i -t \"boundaries_electorates\".\"electorates2009\" delphe | psql -h 115.146.94.209 -U postgres ewedb

#+end_src

* Metadata

*** add metadata using df2ddi bomgrids
#+name:add_ddi
#+begin_src R :session *shell* :tangle src/add_ddi.r :exports none :eval no
  ################################################################
  # name:add_ddi
  setwd('~/DROUGHT-BOM-GRIDS')
  source('~/disentangle/src/df2ddi.r')
  source('~/delphe-project/tools/connect2postgres.r')
  ewedb <- connect2postgres()
  if(!require(rgdal)) install.packages('rgdal'); require(rgdal)
  if(!require(RJDBC)) install.packages('RJDBC'); require(RJDBC)
  drv <- JDBC("oracle.jdbc.driver.OracleDriver",
              '/u01/app/oracle/product/11.2.0/xe/jdbc/lib/ojdbc6.jar')
  p <- readline('enter password: ')
  h <- readline('enter target ipaddres: ')
  d <- readline('enter database name: ')
  ch <- dbConnect(drv,paste("jdbc:oracle:thin:@",h,":1521",sep=''),d,p)
  
  #dir.create('metadata')
  s <- dbGetQuery(ch, "select * from stdydscr where IDNO = 'DROUGHTBOMGRIDS'")
  #s <- add_stdydscr(ask=T)
  #write.table(s,'metadata/stdydscr.csv',sep=',',row.names=F)
  
  s$PRODDATESTDY=format(as.Date( substr(s$PRODDATESTDY,1,10),'%Y-%m-%d'),"%d/%b/%Y")
  s$PRODDATEDOC=format(as.Date( substr(s$PRODDATEDOC,1,10),'%Y-%m-%d'),"%d/%b/%Y")
  
  ## dbSendUpdate(ch,
  ## # cat(
  ## paste('
  ## insert into STDYDSCR (',paste(names(s), sep = '', collapse = ', '),')
  ## VALUES (',paste("'",paste(gsub("'","",ifelse(is.na(s),'',s)),sep='',collapse="', '"),"'",sep=''),')',sep='')
  ## )
  
  f <- add_filedscr(fileid = 1, idno = 'DROUGHTBOMGRIDS', ask=T)
  f$FILELOCATION <- 'bom_grids'
  #f$IDNO <- 'DROUGHTBOMGRIDS'
  dbSendUpdate(ch,
  # cat(
  paste('
  insert into FILEDSCR (',paste(names(f), sep = '', collapse = ', '),')
  VALUES (',paste("'",paste(gsub("'","",ifelse(is.na(f),'',f)),sep='',collapse="', '"),"'",sep=''),')',sep='')
  )
  
  #setwd('../data')
  #setwd('abs_sla')
  #test <- readOGR(dsn = 'tassla06.shp', layer = 'tassla06')
  fid <- dbGetQuery(ch,
  #                  cat(
                    paste("select FILEID
                    from filedscr
                    where filelocation = '",f$FILELOCATION,"'
                    and filename = '",f$FILENAME,"'",
                    sep=''))
  
  df <- dbGetQuery(ewedb,
                   'select * from bom_grids.rain_nsw_1890_2008_4 limit 1'
                   )
  df
  d <- add_datadscr(data_frame = df, fileid = fid[1,1], ask=T)
  
  
  for(i in 1:nrow(d)){
  dbSendUpdate(ch,
  #i = 1
  # cat(
  paste('
  insert into DATADSCR (',paste(names(d), sep = '', collapse = ', '),')
  VALUES (',paste("'",paste(gsub("'","",ifelse(is.na(d[i,]),'',d[i,])),sep='',collapse="', '"),"'",sep=''),')',sep='')
  )
  }
  
  
  ###################################################
  # make xml
  s <- dbGetQuery(ch, "select * from stdydscr where idno = 'DROUGHTBOMGRIDS'")
  s
  f <- dbGetQuery(ch, "select * from filedscr where idno = 'DROUGHTBOMGRIDS'")
  f
  for(fi in f){
  d <- dbGetQuery(ch,
                  paste("select * from datadscr where FILEID = ",f$FILEID,
                        sep = '')
                  )
  d
  ddixml <- make_xml(s,f,d)
  }
  out <- dir(pattern='xml')
  file.remove(file.path('/xmldata', out))
  file.copy(out, '/xmldata')
  
#+end_src










*** TODO add metadata using df2ddi electorates, move to elecorate project
#+name:add_ddi
#+begin_src R :session *shell* :tangle src/add_ddi.r :exports none :eval no
  ################################################################
  # name:add_ddi
  source('~/disentangle/src/df2ddi.r')
  source('~/disentangle/src/connect2postgres.r')
  ewedb <- connect2postgres()
  if(!require(rgdal)) install.packages('rgdal'); require(rgdal)
  if(!require(RJDBC)) install.packages('RJDBC'); require(RJDBC)
  drv <- JDBC("oracle.jdbc.driver.OracleDriver",
              '/u01/app/oracle/product/11.2.0/xe/jdbc/lib/ojdbc6.jar')
  p <- readline('enter password: ')
  h <- readline('enter target ipaddres: ')
  d <- readline('enter database name: ')
  ch <- dbConnect(drv,paste("jdbc:oracle:thin:@",h,":1521",sep=''),d,p)
  
  #dir.create('metadata')
  s <- dbGetQuery(ch, "select * from stdydscr where IDNO = 'BOUNDARIES_ELECTORATES'")
  # s <- add_stdydscr(ask=T)
  #write.table(s,'metadata/stdydscr.csv',sep=',',row.names=F)
  
  s$PRODDATESTDY=format(as.Date( substr(s$PRODDATESTDY,1,10),'%Y-%m-%d'),"%d/%b/%Y")
  s$PRODDATEDOC=format(as.Date( substr(s$PRODDATEDOC,1,10),'%Y-%m-%d'),"%d/%b/%Y")
  
  ## dbSendUpdate(ch,
  ## # cat(
  ## paste('
  ## insert into STDYDSCR (',paste(names(s), sep = '', collapse = ', '),')
  ## VALUES (',paste("'",paste(gsub("'","",ifelse(is.na(s),'',s)),sep='',collapse="', '"),"'",sep=''),')',sep='')
  ## )
  
  f <- add_filedscr(fileid = 1, idno = 'BOUNDARIES_ELECTORATES', ask=T)
  f$FILELOCATION <- 'BOUNDARIES_ELECTORATES'
  
  dbSendUpdate(ch,
  # cat(
  paste('
  insert into FILEDSCR (',paste(names(f), sep = '', collapse = ', '),')
  VALUES (',paste("'",paste(gsub("'","",ifelse(is.na(f),'',f)),sep='',collapse="', '"),"'",sep=''),')',sep='')
  )
  f <- dbGetQuery(ch, "select * from filedscr where IDNO = 'BOUNDARIES_ELECTORATES'")
  f
  
  fid <- dbGetQuery(ch,
  #                  cat(
                    paste("select FILEID
                    from filedscr
                    where filelocation = '",f$FILELOCATION,"'
                    and filename = '",f$FILENAME,"'",
                    sep=''))
  
  df <- dbGetQuery(ewedb,
                   'select elect_div, state from boundaries_electorates.electorates2009 limit 1'
                   )
  df[1,]
  df <- readOGR2(hostip = '115.146.94.209', user = 'steven_mceachern',
                   db = 'ewedb', layer =
                   'boundaries_electorates.electorates2009')
  df@data[1:10,]
  d <- add_datadscr(data_frame = df, fileid = fid[1,1], ask=T)
  d
  
  for(i in 1:nrow(d)){
  dbSendUpdate(ch,
  #i = 1
  # cat(
  paste('
  insert into DATADSCR (',paste(names(d), sep = '', collapse = ', '),')
  VALUES (',paste("'",paste(gsub("'","",ifelse(is.na(d[i,]),'',d[i,])),sep='',collapse="', '"),"'",sep=''),')',sep='')
  )
  }
  
  
  ###################################################
  # make xml
  studyID <- 'BOUNDARIES_ELECTORATES'
  s <- dbGetQuery(ch, paste("select * from stdydscr where idno = '",studyID,"'",sep=''))
  s
  f <- dbGetQuery(ch, paste("select * from filedscr where idno = '",studyID,"'",sep=''))
  f
  for(fi in f){
  d <- dbGetQuery(ch,
                  paste("select * from datadscr where FILEID = ",f$FILEID,
                        sep = '')
                  )
  d
  ddixml <- make_xml(s,f,d)
  }
  out <- dir(pattern='xml')
  file.remove(file.path('/xmldata', out))
  file.copy(out, '/xmldata')
  # go to indexer.jsp
  out
  
#+end_src
 
